{"version":3,"sources":["game/Card.js","game/GameBoard.js","util/permutation.js","App.js","index.js"],"names":["Card","props","contents","enabled","clicked","wrong","won","cssClasses","className","onClick","src","alt","title","cardsBase","DIFFICULTY_LEVELS","3","5","7","initCards","count","slice","map","obj","initState","cards","score","bestScore","gameOver","lastCard","stateReducer","state","action","card","updatedCards","nextLevel","attach","length","concat","Error","GameBoard","useReducer","dispatch","cardGrid","useRef","useEffect","cardElems","current","querySelectorAll","getNextIndex","max","indices","Array","i","r","Math","floor","random","splice","permutation","forEach","elem","style","order","allCount","ref","cardObj","App","href","target","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c8bc0ed5.chunk.js","sourcesContent":["import './Card.css';\n\nexport default function Card(props) {\n  const {contents, enabled, clicked, wrong, won} = props;\n  \n  const cssClasses = \"Card\" +\n                ((enabled && \" enabled\") || \"\") +\n                ((!enabled && clicked && \" selected\") || \"\") +\n                ((!enabled && wrong && \" mistake\") || \"\") +\n                ((!enabled && won && \" won\") || \"\");\n  return (\n    <div className={cssClasses} onClick={props.onClick}>\n      <img src={contents.src} alt={contents.title} />\n      <h2>{contents.title}</h2>\n    </div>\n  );\n}\n","import './GameBoard.css';\nimport {useEffect, useReducer, useRef} from 'react';\nimport permutation from '../util/permutation';\nimport Card from './Card';\n\n\nconst cardsBase = [\n  {contents: {title: \"Smurfette\",     src: \"smurfs/Smurfette.webp\"},            clicked: false},\n  {contents: {title: \"Handy Smurf\",   src: \"smurfs/Schtroumpf-bricoleur.webp\"}, clicked: false},\n  {contents: {title: \"Vanity Smurf\",  src: \"smurfs/VanitySmurf.webp\"},          clicked: false},\n  {contents: {title: \"Chef Smurf\",    src: \"smurfs/Schtroumpf_cuisinier.webp\"}, clicked: false},\n  {contents: {title: \"Jokey Smurf\",   src: \"smurfs/Schtroumpf_Farceur.webp\"},   clicked: false},\n  {contents: {title: \"Greedy Smurf\",  src: \"smurfs/greedy-smurf.jpg\"},          clicked: false},\n  {contents: {title: \"Hefty Smurf\",   src: \"smurfs/Schtroumpf-costaud.webp\"},   clicked: false},\n  {contents: {title: \"Grouchy Smurf\", src: \"smurfs/Schtroumpf-grognon.webp\"},   clicked: false},\n  {contents: {title: \"Clumsy Smurf\",  src: \"smurfs/clumsy-smurf.jpg\"},          clicked: false},\n  {contents: {title: \"Papa Smurf\",    src: \"smurfs/Papa_smurf.jpg\"},            clicked: false},\n];\n\nconst START_COUNT = 5;\n\nconst DIFFICULTY_LEVELS = {3:7, 5:8, 7:10};\n\nfunction initCards(count) {\n  // deep copy 'count' number of items from cardsBase\n  return cardsBase.slice(0, count).map(obj => ({...obj}));\n}\n\nfunction initState(count) {\n  return {\n    cards: initCards(count),\n    score: 0,\n    bestScore: 0,\n    gameOver: false,\n    lastCard: null,\n  }\n}\n\nfunction stateReducer(state, action) {\n  switch(true) {\n    case action === \"reset\":\n      /* Reset the board: return the cards to initial state */\n      return {\n        ...initState(START_COUNT),\n        bestScore: state.bestScore, // copy best score from previous state\n      };\n\n    case typeof action === \"number\" && state.gameOver:\n      /* 'Ignore' if is game has ended */\n      return state;\n\n    case typeof action === \"number\" && state.cards[action].clicked:\n      /* Player guessed an incorrect card */\n      return {\n        ...state,\n        lastCard: action,\n        gameOver: true,\n      }\n    \n    case typeof action === \"number\":\n      /* Player guessed a correct card */\n      const lastCard = action;\n      const card = state.cards[lastCard];\n      // update score\n      const score = state.score + 1;\n      // set card to clicked\n      let updatedCards = state.cards.slice();\n      updatedCards[lastCard] = {...card, clicked: true};\n      // check for difficulty breakpoint\n      const nextLevel = DIFFICULTY_LEVELS[score];\n      const attach = (nextLevel && cardsBase.slice(updatedCards.length, nextLevel)) || [];\n      updatedCards = updatedCards.concat(attach.map(obj => ({...obj})));\n      // update best score if needed\n      const bestScore = score > state.bestScore ? score : state.bestScore;\n      // new state:\n      return {\n        score,\n        bestScore,\n        lastCard,\n        cards: updatedCards,\n        gameOver: score === cardsBase.length, // all cards already clicked\n      };\n\n    default:\n      /* coding error, unplanned case */\n      throw new Error(`action: ${action}`);\n  }\n}\n\nexport default function GameBoard() {\n  const [state, dispatch] = useReducer(stateReducer, START_COUNT, initState);\n  const cardGrid = useRef();\n\n  useEffect(() => {\n    /* Shuffle Cards in the DOM, using CSS grid order property */\n    const cardElems = cardGrid.current.querySelectorAll(\".Card\");\n    const getNextIndex = permutation(cardElems.length);\n    cardElems.forEach(elem => {\n        elem.style.order = getNextIndex();\n    });\n  });\n\n  const {score, bestScore, gameOver, lastCard} = state;\n  const allCount = cardsBase.length;\n\n  return (\n    <div className=\"GameBoard\">\n      <div className=\"scores\">\n        <p>Score: {score} / {allCount}</p>\n        <p>Best Score: {bestScore} / {allCount}</p>\n      </div>  \n      <div className=\"cards-container\" ref={cardGrid}>\n        {state.cards.map((cardObj, i) =>\n          <Card key={i} {...cardObj} onClick={() => dispatch(i)} enabled={!gameOver} won={score === allCount && lastCard === i} wrong={score !== allCount && lastCard === i} />\n        )}\n      </div>\n      {state.gameOver && (\n        <div className=\"popup\">\n          <p>You got {score === allCount ? \"all of them!\" : `${score} out of ${allCount}.` }</p>\n          <button onClick={() => dispatch(\"reset\")}>\n            {score === allCount ? \"Play\" : \"Try\"} Again\n          </button>\n        </div>\n      )}\n    </div>\n  );\n}\n","export default function permutation(max) {\n  const indices = new Array(max);\n  for (let i = 0; i < max; i++) {\n    indices[i] = i + 1; \n  }\n\n  return () => {\n    const r = Math.floor(Math.random() * indices.length);\n    return indices.splice(r, 1)[0];\n  };\n}\n","import './App.css';\nimport GameBoard from './game/GameBoard';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header>\n        <h1><span className=\"big\">The Smurfs</span> <span className=\"small\">Memory Game</span></h1>\n        <div className=\"brainy-explain\">\n          <p>\"Click <em>every</em> card, but only <em>once</em>.\"</p>\n          <img src=\"./smurfs/Brainy.webp\" alt=\"\"></img>\n        </div>\n      </header>\n      <GameBoard />\n      <footer>\n        Made by <a href=\"https://github.com/themetar\" target=\"_blank\" rel=\"noreferrer\">themetar</a>. <i>The Smurfs</i> by <a href=\"https://en.wikipedia.org/wiki/Peyo\" target=\"_blank\" rel=\"noreferrer\">Peyo</a>.\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './fonts.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}